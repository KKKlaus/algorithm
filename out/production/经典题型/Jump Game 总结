-----------------------------------------Jump Game1------------------------------------------
题目：You are given an integer array nums. You are initially positioned at the array's first index,
     and each element in the array represents your maximum jump length at that position.
     Return true if you can reach the last index, or false otherwise.
做法：if (i <= max) { max = Math.max(max, i + nums[i]);}

-----------------------------------------Jump Game2------------------------------------------
题目： Each element in the array represents your maximum jump length at that position.
      Your goal is to reach the last index in the minimum number of jumps.
做法： 贪心，看下答案

-----------------------------------------Jump Game3------------------------------------------
题目：When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0
做法：最简单的BFS


-----------------------------------------Jump Game4------------------------------------------
题目：i + 1 where: i + 1 < arr.length.
     i - 1 where: i - 1 >= 0.
     j where: arr[i] == arr[j] and i != j
做法：也是用BFS，优化是每次都需要删除hashmap里对应找过的value j： map.remove(j)


-----------------------------------------Jump Game5------------------------------------------
题目： 柱状体，只能往下跳，有限制左右d
做法：其实是有向无环图，memo + dfs可以做（多看下），也可以拓扑排序


-----------------------------------------Jump Game6------------------------------------------
题目：只能往前跳 [i + 1, min(n - 1, i + k)] inclusive. 得分nums[i].，求max score
做法：dp + maxslidingWindow, 注意先更新dp值，再deque操作


-----------------------------------------Jump Game7------------------------------------------
题目：You can move from index i to index j if the following conditions are fulfilled:
    i + minJump <= j <= min(i + maxJump, s.length - 1), and
    s[j] == '0'
做法：BFS，同时有个farthest = cur + maxJump 确保每次int start = Math.max(farthest + 1, cur+ minJump); 来剪枝